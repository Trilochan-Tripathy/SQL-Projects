- Assume you're given a table Twitter tweet data, write a query to obtain a histogram of tweets posted per user in 2022. Output the tweet count per user as the bucket and the number of Twitter users who fall into that buckeIn other words, group the users by the number of tweets they posted in 2022 and count the number of users in each group.
WITH total_tweets AS (
  SELECT 
    user_id, 
    COUNT(tweet_id) AS tweet_count_per_user
  FROM tweets 
  WHERE tweet_date BETWEEN '2022-01-01' 
    AND '2022-12-31' 
  GROUP BY user_id) 
SELECT 
  tweet_count_per_user AS tweet_bucket, 
  COUNT(user_id) AS users_num 
FROM total_tweets 
GROUP BY tweet_count_per_user;

- Write a query to list the candidates who possess all of the required skills for the job. Sort the output by candidate ID in ascending order.
SELECT candidate_id
FROM candidates
WHERE skill IN ('Python','Tableau','PostgreSQL') 
GROUP BY candidate_id
HAVING COUNT(skill) = 3
ORDER BY candidate_id ASC  


- Write a query to return the IDs of the Facebook pages that have zero likes. The output should be sorted in ascending order based on the page IDs.
SELECT P.page_id 
FROM pages P LEFT JOIN  page_likes L   
ON P.page_id = L.page_id 
WHERE liked_date is NULL
ORDER BY P.page_id  ASC

- Tesla is investigating production bottlenecks and they need your help to extract the relevant data. Write a query to determine which parts have begun the assembly process but are not yet finished.
SELECT part,assembly_step
FROM parts_assembly
WHERE finish_date is NULL

- Write a query that calculates the total viewership for laptops and mobile devices where mobile is defined as the sum of tablet and phone viewership. Output the total viewership for laptops as laptop_reviews and the total viewership for mobile devices as mobile_views.
SELECT 
  SUM(CASE WHEN device_type = 'laptop' THEN 1 ELSE 0 END) AS laptop_views, 
  SUM(CASE WHEN device_type IN ('tablet', 'phone') THEN 1 ELSE 0 END) AS mobile_views 
FROM viewership;

- Given a table of Facebook posts, for each user who posted at least twice in 2021, write a query to find the number of days between each userâ€™s first post of the year and last post of the year in the year 2021. Output the user and number of the days between each user's first and last post.
SELECT 
	user_id, 
    MAX(post_date::DATE) - MIN(post_date::DATE) AS days_between
FROM posts
WHERE DATE_PART('year', post_date::DATE) = 2021 
GROUP BY user_id
HAVING COUNT(post_id)>1;  


- Write a query to identify the top 2 Power Users who sent the highest number of messages on Microsoft Teams in August 2022. Display the IDs of these 2 users along with the total number of messages they sent. Output the results in descending order based on the count of the messages.
SELECT sender_id , COUNT(sender_id) as No_Of_msgs
FROM messages
WHERE Date_part('Year',sent_date::DATE) = 2022 and Date_part('Month',sent_date::DATE) = 8
GROUP BY sender_id
ORDER BY No_Of_msgs DESC  
LIMIT 2

- Write a query to retrieve the count of companies that have posted duplicate job listings.
SELECT count(DISTINCT(l.company_id))
FROM job_listings as l
LEFT JOIN job_listings AS r ON l.company_id = r.company_id
WHERE l.title = r.title 
AND l.description = r.description 
AND l.job_id <> r.job_id 

- Write a query to retrieve the top three cities that have the highest number of completed trade orders listed in descending order. Output the city name and the corresponding number of completed trade orders.
SELECT u.city , COUNT(order_id) as no_of_traders
FROM trades t inner join users u 
ON t.user_id = u.user_id
WHERE status = 'Completed'
GROUP BY u.city
ORDER BY no_of_traders DESC
LIMIT 3

- write a query to retrieve the average star rating for each product, grouped by month. The output should display the month as a numerical value, product ID, and average star rating rounded to two decimal places. Sort the output first by month and then by product ID.
SELECT Date_part('Month',submit_date::Date) as MONTH_NO , product_id  ,
ROUND(AVG(stars),2) as AVG_Ratings
FROM reviews 
GROUP BY product_id , MONTH_NO
ORDER BY MONTH_NO , product_id  

- Write a query to calculate the click-through rate (CTR) for the app in 2022 and round the results to 2 decimal places.
SELECT app_id,ROUND(100.0 *
    COUNT(CASE WHEN event_type = 'click' THEN 1 ELSE NULL END) /
    COUNT(CASE WHEN event_type = 'impression' THEN 1 ELSE NULL END), 2)  AS ctr_rate
FROM events 
WHERE DATE_PART('YEAR',timestamp::DATE) = 2022
GROUP BY app_id 

- Write a query to display the user IDs of those who did not confirm their sign-up on the first day, but confirmed on the second day.
SELECT user_id FROM emails e  
JOIN texts t ON e.email_id = t.email_id
WHERE signup_action = 'Confirmed' 
AND 
t.action_date = DATE(e.signup_date)+1

- 



